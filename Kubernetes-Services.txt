Full set of Kubernetes manifest files for:

- A Pod running NGINX

- A Service for each type: ClusterIP, NodePort, and LoadBalancer

- An Ingress resource to expose the service via a hostname

You can use these to demonstrate internal and external access patterns.

###############################
1. Pod Manifest: nginx-pod.yaml
###############################
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  labels:
    app: nginx
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - containerPort: 80

############################################################
2. ClusterIP Service (Internal Access): nginx-clusterip.yaml
############################################################

apiVersion: v1
kind: Service
metadata:
  name: nginx-clusterip
spec:
  type: ClusterIP
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
# Access from inside the cluster using: http://nginx-clusterip

######################################################################
3. NodePort Service (External Access via Node IP): nginx-nodeport.yaml
######################################################################
apiVersion: v1
kind: Service
metadata:
  name: nginx-nodeport
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
Access from outside using: http://<NodeIP>:30080

##########################################################################################
4. LoadBalancer Service (External Access via Cloud Load Balancer): nginx-loadbalancer.yaml
##########################################################################################
apiVersion: v1
kind: Service
metadata:
  name: nginx-loadbalancer
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
This will never work on a KUBEADM Cluster. This only works on cloud platforms like AWS, GCP, Azure, or in setups 
with MetalLB for bare metal clusters.

###############################################################
5. Ingress Resource (External HTTP Routing): nginx-ingress.yaml
###############################################################
First, ensure you have an Ingress Controller installed (like NGINX Ingress Controller).

Then apply:

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: nginx.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-clusterip
            port:
              number: 80
Access externally via: http://nginx.example.com

Youâ€™ll need to map nginx.example.com to your Ingress Controller IP in /etc/hosts or DNS.
##########################################################################################
âœ… Apply in Order:

kubectl apply -f nginx-pod.yaml
kubectl apply -f nginx-clusterip.yaml
kubectl apply -f nginx-nodeport.yaml
kubectl apply -f nginx-loadbalancer.yaml
kubectl apply -f nginx-ingress.yaml

ðŸ§  Notes:
Resource	Use Case	Access Type
ClusterIP	Internal communication (default)	Within cluster
NodePort	Dev/test access without Ingress controller	<NodeIP>:Port
LoadBalancer	Direct access via cloud load balancer	Public IP
Ingress	Path-based or host-based routing	DNS + Ingress IP